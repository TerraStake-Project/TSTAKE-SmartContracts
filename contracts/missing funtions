/**Missing functions for TerraStakeTreasuryManager
/** 
 * @notice Process fees from project submission or impact reporting
 * @param feeType The type of fee: 1 for project submission, 2 for impact reporting
 * @param amount The amount of USDC to collect
 */
function processFees(uint8 feeType, uint256 amount) external onlyRole(GOVERNANCE_ROLE) nonReentrant {
    if (amount == 0) revert InvalidAmount();

    // Determine the fee type and process accordingly
    if (feeType == 1) {
        // Project submission fee
        require(amount >= currentFeeStructure.projectSubmissionFee, "Insufficient project submission fee");
        usdcToken.transferFrom(msg.sender, address(this), amount);
        emit TreasuryTransfer(address(usdcToken), treasuryWallet, currentFeeStructure.projectSubmissionFee);
    } else if (feeType == 2) {
        // Impact reporting fee
        require(amount >= currentFeeStructure.impactReportingFee, "Insufficient impact reporting fee");
        usdcToken.transferFrom(msg.sender, address(this), amount);
        emit TreasuryTransfer(address(usdcToken), treasuryWallet, currentFeeStructure.impactReportingFee);
    } else {
        revert InvalidParameters();
    }
}

/**
 * @notice Split the fee into categories (buyback, liquidity, burn, treasury)
 * @param amount The total amount to split (e.g., buyback funds)
 */
function splitFee(uint256 amount)
    internal
    returns (
        uint256 buybackAmount,
        uint256 liquidityAmount,
        uint256 burnAmount,
        uint256 treasuryAmount
    )
{
    if (amount == 0) revert InvalidAmount();

    // Calculate the split amounts based on percentages
    buybackAmount = (amount * currentFeeStructure.buybackPercentage) / 100;
    liquidityAmount = (amount * currentFeeStructure.liquidityPairingPercentage) / 100;
    burnAmount = (amount * currentFeeStructure.burnPercentage) / 100;
    treasuryAmount = (amount * currentFeeStructure.treasuryPercentage) / 100;

    // Transfer each category if the amount is greater than zero and emit an event
    if (buybackAmount > 0) {
        usdcToken.transfer(address(this), buybackAmount); // Fund buyback
        emit FeeTransferred("Buyback", buybackAmount);
    }

    if (liquidityAmount > 0) {
        usdcToken.transfer(address(this), liquidityAmount); // Fund liquidity pairing
        emit FeeTransferred("Liquidity", liquidityAmount);
    }

    if (burnAmount > 0) {
        usdcToken.transfer(address(0xdead), burnAmount); // Burn tokens
        emit FeeTransferred("Burn", burnAmount);
    }

    if (treasuryAmount > 0) {
        usdcToken.transfer(treasuryWallet, treasuryAmount); // Transfer to treasury
        emit FeeTransferred("Treasury", treasuryAmount);
    }

    return (buybackAmount, liquidityAmount, burnAmount, treasuryAmount);
}

/**
 * @notice Execute a buyback using the fee mechanism
 * @param amount The total amount to use for buyback and associated processes
 */
function executeBuyback(uint256 amount) external onlyRole(GOVERNANCE_ROLE) nonReentrant {
    if (amount == 0) revert InvalidAmount();

    // Split the fees into categories
    (
        uint256 buybackAmount,
        uint256 liquidityAmount,
        uint256 burnAmount,
        uint256 treasuryAmount
    ) = splitFee(amount);

    // Perform buyback with the allocated funds
    performBuyback(buybackAmount);

    // Add liquidity if enabled and funds are available
    if (liquidityPairingEnabled && liquidityAmount > 0) {
        addLiquidity(liquidityAmount);
    }

    emit BuybackExecuted(buybackAmount, /* tokens bought */ buybackAmount);
}

/**
 * @notice Emergency adjustment of fees for governance purposes
 * @param feeType The type of fee to adjust: 1 for project submission, 2 for impact reporting
 * @param newValue The new value for the specified fee type
 */
function emergencyAdjustFee(uint8 feeType, uint256 newValue) external onlyRole(GOVERNANCE_ROLE) {
    if (newValue == 0) revert InvalidAmount();

    // Adjust the specified fee in the current fee structure
    if (feeType == 1) {
        currentFeeStructure.projectSubmissionFee = newValue;
    } else if (feeType == 2) {
        currentFeeStructure.impactReportingFee = newValue;
    } else {
        revert InvalidParameters();
    }

    emit FeeStructureUpdated(
        currentFeeStructure.projectSubmissionFee,
        currentFeeStructure.impactReportingFee,
        currentFeeStructure.buybackPercentage,
        currentFeeStructure.liquidityPairingPercentage,
        currentFeeStructure.burnPercentage,
        currentFeeStructure.treasuryPercentage
    );
}

/**
 * @notice Event emitted when a fee is transferred to a specific category (buyback, liquidity, burn, treasury)
 * @param category The category of the fee (buyback, liquidity, burn, treasury)
 * @param amount The amount transferred to the category
 */
event FeeTransferred(string category, uint256 amount);

/**
 * @notice Event emitted when a buyback is executed
 * @param amount The amount spent in the buyback
 * @param tokensBought The number of tokens bought
 */
event BuybackExecuted(uint256 amount, uint256 tokensBought);

/**
 * @notice Event emitted when the fee structure is updated
 * @param projectSubmissionFee The new project submission fee
 * @param impactReportingFee The new impact reporting fee
 * @param buybackPercentage The new buyback percentage
 * @param liquidityPairingPercentage The new liquidity pairing percentage
 * @param burnPercentage The new burn percentage
 * @param treasuryPercentage The new treasury percentage
 */
event FeeStructureUpdated(
    uint256 projectSubmissionFee,
    uint256 impactReportingFee,
    uint256 buybackPercentage,
    uint256 liquidityPairingPercentage,
    uint256 burnPercentage,
    uint256 treasuryPercentage
);